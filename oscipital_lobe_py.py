# -*- coding: utf-8 -*-
"""Oscipital_lobe.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m0XdqDhvXi0zDhgR7KNNCJxQt8dQAwFb
"""

import cv2
import numpy as np
import tensorflow as tf
import requests
from io import BytesIO
from PIL import Image, UnidentifiedImageError
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
import os
from pytube import YouTube

# Function to download and preprocess an image from URL
def download_and_preprocess_image(image_url):
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}
    try:
        response = requests.get(image_url, headers=headers, stream=True)
        response.raise_for_status()
        image = Image.open(BytesIO(response.content)).convert('L')
        image = image.resize((128, 128))
        image = np.array(image, dtype=np.uint8)
        return image, image
    except (requests.exceptions.RequestException, UnidentifiedImageError) as e:
        print("Error loading image:", e)
        print("Using backup image instead.")
        image = np.zeros((128, 128), dtype=np.uint8)
        return image, image

# Function to download a video from YouTube
def download_youtube_video(youtube_url, filename="video.mp4"):
    yt = YouTube(youtube_url)
    stream = yt.streams.filter(res="360p", file_extension="mp4").first()
    stream.download(filename=filename)
    return filename

# Optical Flow for Motion Tracking (Simulating V5 Processing)
def optical_flow(video_url):
    video_path = download_youtube_video(video_url)
    cap = cv2.VideoCapture(video_path)
    ret, frame1 = cap.read()
    frame1 = cv2.resize(frame1, (128, 128))
    prvs = cv2.cvtColor(frame1, cv2.COLOR_BGR2GRAY)
    hsv = np.zeros_like(frame1)
    hsv[..., 1] = 255

    while cap.isOpened():
        ret, frame2 = cap.read()
        if not ret:
            break
        frame2 = cv2.resize(frame2, (128, 128))
        next = cv2.cvtColor(frame2, cv2.COLOR_BGR2GRAY)
        flow = cv2.calcOpticalFlowFarneback(prvs, next, None, 0.5, 3, 15, 3, 5, 1.2, 0)
        mag, ang = cv2.cartToPolar(flow[..., 0], flow[..., 1])
        hsv[..., 0] = ang * 180 / np.pi / 2
        hsv[..., 2] = cv2.normalize(mag, None, 0, 255, cv2.NORM_MINMAX)
        rgb = cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)
        cv2_imshow(rgb)
        prvs = next
    cap.release()
    os.remove(video_path)  # Remove downloaded video after processing
    cv2.destroyAllWindows()

# Function to evaluate model performance
def evaluate_model(model):
    print("\nEvaluating Model Performance...")
    (x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()
    x_test_resized = np.array([cv2.resize(img, (128, 128)) for img in x_test])  # Resize MNIST to 128x128
    x_test_resized = np.expand_dims(x_test_resized, axis=-1)  # Ensure shape compatibility
    x_test_resized = x_test_resized.astype("float32") / 255.0  # Normalize
    loss, accuracy = model.evaluate(x_test_resized, y_test, verbose=1)
    print(f"Test Loss: {loss:.4f}")
    print(f"Test Accuracy: {accuracy:.4f}")

# Run Image Processing
display_occipital_info()
image_url = "https://upload.wikimedia.org/wikipedia/commons/4/4d/Cat_November_2010-1a.jpg"
raw_image, processed_image = download_and_preprocess_image(image_url)

# Show Original Image
print("Original Image:")
cv2_imshow(cv2.resize(raw_image, (128, 128)))

# Edge Detection
edges = edge_detection(raw_image)
print("Edge Detection Result:")
cv2_imshow(edges)

# Fourier Transform
magnitude_spectrum = fourier_transform(raw_image)
plt.figure(figsize=(4, 4))
plt.imshow(magnitude_spectrum, cmap='gray')
plt.title("Fourier Transform Analysis")
plt.axis('off')
plt.show()

# Show Model Summary Separately
print("CNN Model Summary:")
model = build_cnn_model()
model.summary()

# Evaluate Model Performance


# Process YouTube Video
youtube_video_url = "https://youtu.be/pDpKEKNwz2Y"  # Replace with your YouTube video link
# optical_flow(youtube_video_url)  # Uncomment to process the YouTube video

